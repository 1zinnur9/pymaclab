/*
This file produces the baseline VAR estimates for CEE 2005 Figure 1

*/

cal 1964 1 4
all 0 (1995:4)+200

environment noshowgraphs

smpl 1964:1 1995:2

compute nlag = 4
compute neq   = 9
compute nshox = 9
compute nstep = 20
compute gstep = 20
compute ndraws = 500
compute nvar_graf = 9
compute nvar = nshox
compute lags = nlag

compute ibeg = (1964:1)+nlag+1 
compute iend = 1995:2

open data cee2005data.asc
data(org=obs) 1964:2 1995:2 y infl cons invest wage prod rff dm realprof

dec vector[real] vvv(nstep*neq*nstep*neq)
dec index implist(20) minlist(20) pluslist(20) list(20) listx(20) stdlist(20)
dec index medlist(20)
dec sym vmat(nshox,nshox) vmatx(nshox,nshox)
dec vector[vector] vbeta(nshox) vbetax(nshox)
dec vect[series] vresid(nshox) vsimdata(nshox) vsimresid(nshox) $
                 vresidx(nshox) resid(nshox) decseries(nshox)
dec vect[labels] shoklabel(nshox) varlabel(neq)
dec rect[series] impulses(neq,neq) impulsesx(neq,neq) asymerr(neq,nstep) $
                 first(neq,neq) second(neq,neq) stderr(neq,neq) asymdec(neq,nstep)
dec vect[integers] shok_index(20) var_index(20)
dec vect[real] dummy(nlag*nshox+1)
dec vect[rectangular] decomp decompx

enter(varying) shok_index  ;  *for graphing
# 7
enter(varying) var_index   ;  *for graphing
# 1 2 3 4 5 6 7 8 9
*disp 'testing rows of shok_index = ' %rows(shok_index)


clear y_est price_est inv_est rff_est dm_est w_est pi_est
clear y_hi price_hi inv_hi rff_hi dm_hi w_hi pi_hi
clear y_lo price_lo inv_lo rff_lo dm_lo w_lo pi_lo
clear cons_est cons_hi cons_lo
clear y_std price_std cons_std inv_std w_std rff_std dm_std pi_std
clear prod_est prod_std prod_hi prod_lo
clear cu_est cu_std cu_hi cu_lo
clear prof_est prof_hi prof_lo prof_std prof_med

dec vect[series] p_draws(nstep) py_draws(nstep)

smpl ibeg iend

enter(varying) list
# y infl cons invest wage prod rff dm realprof
enter(varying) implist
# y_est pi_est cons_est inv_est w_est prod_est rff_est dm_est prof_est
enter(varying) pluslist
# y_hi pi_hi cons_hi inv_hi w_hi prod_hi rff_hi dm_hi prof_hi
enter(varying) minlist
# y_lo pi_lo cons_lo inv_lo w_lo prod_lo rff_lo dm_lo prof_lo
enter(varying) stdlist
# y_std pi_std cons_std inv_std w_std prod_std rff_std dm_std prof_std

*print(dates) / prdnfb prdb prdnfc

/*
this is where the normal code calls a source file that contains swishart s.e.
*/


do jjvar = 1,nshox
linreg(print,define=jjvar) list(jjvar) / vresid(jjvar)
# constant list(1){1 to nlag} list(2){1 to nlag} list(3){1 to nlag} $
           list(4){1 to nlag} list(5){1 to nlag} list(6){1 to nlag} $
           list(7){1 to nlag} list(8){1 to nlag} list(9){1 to nlag}
           
compute vbeta(jjvar) = %beta
associate(perm) jjvar vbeta(jjvar)
end do jjvar


/*
use Swishart to compute error bands
compute non-diagonal V matrix for impies.
*/

SYSTEM 1 TO NVAR
VARIABLES list
LAGS 1 TO LAGS
KFSET XXX
DET CONSTANT
END(SYSTEM)
*
*  Set aside space for the coefficients and ASSOCIATE the vectors
*  with the equations
*
COMPUTE NCOEF=NVAR*LAGS+1
DEC RECTANGULAR BETAMAT(NCOEF,NVAR)
DEC VECTOR OVBETA
DO I=1,NVAR
   OVERLAY BETAMAT(1,I) WITH OVBETA(NCOEF)
   ASSOCIATE(PERM) I OVBETA
END DO I
*
ESTIMATE(OUTSIGMA=VMAT)
*


dec rect rmat(nshox,nshox)
compute rmat = vmat


do i=1,nshox
   list ieqn = 1 to neq
   impulse(noprint) neq nstep i vmat
   cards ieqn impulses(i,ieqn) * ieqn
end do i
   errors(noprint) neq nstep vmat
   cards ieqn * * ieqn


*to get price level: cumulate mpshock (#7) inflation responses (#2)
set p_est 1 1 = impulses(7,2){0}
set p_est 2 nstep = impulses(7,2){0}+p_est{1}

*to get nominal gedp: add y and p
set py_est 1 nstep = p_est{0}+impulses(7,1){0}


DECLARE RECT SXX(NCOEF,NCOEF) SINV(NVAR,NVAR) SWISH(NVAR,NVAR) $
   RANW(NVAR,%NOBS) RANTR(%NOBS,NVAR) RANC(NCOEF,NVAR) SXXUOVER
DECLARE VECTOR  BETADRAW  BETAOLS(NCOEF*NVAR) SXXU(NCOEF*NVAR)
OVERLAY SXXU(1)      WITH SXXUOVER(NCOEF,NVAR)
OVERLAY BETAMAT(1,1) WITH BETADRAW(NCOEF*NVAR)
COMPUTE SXX =TR(%DECOMP(XXX))
COMPUTE SINV=TR(%DECOMP(INV(VMAT)))
COMPUTE BETAOLS=BETADRAW
*
LIST IEQN = 1 TO NVAR
*
* TR(RANTR)*RANTR = draw from Wishart distribution for SIGMA inverse.
* SWISH           = Choleski factor of the computed draw for SIGMA.
* KRONID(SWISH,SXXUOVER) = Draw from N(0,SIGMA x X'X inverse).  It is
*   computed by postmultiplying the Kronecker product of the decompositions
*   of SIGMA and X'X inverse by a vector of standard Normal draws.
*
DO DRAWS = 1,NDRAWS
  COMPUTE RANW    =%RAN(1.0/SQRT(%NOBS))
  COMPUTE RANTR   =TR(RANW)*SINV
  COMPUTE SWISH   =%DECOMP(INV( (TR(RANTR)*RANTR) ) )
  COMPUTE RANC    =%RAN(1.0)
  COMPUTE SXXUOVER=TR(SXX)*RANC
  COMPUTE BETADRAW=BETAOLS+%KRONID(SWISH,SXXU)
  DO I=1,NVAR
    IMPULSE(NOPRINT,DECOMP=SWISH) NVAR NSTEP I
    CARDS IEQN  IMPULSESx(i,ieqn)  *  IEQN
  END DO I

    do kkvar=1,nvar_graf
    do kkstep=1,nstep
      set asymerr(var_index(kkvar),kkstep) draws draws = $ 
      impulsesx(shok_index(1),var_index(kkvar))(kkstep)
    end do kkstep
    end do jjshok

*to get price level: cumulate mpshock (#7) inflation responses (#2)

set p_draws(1) draws draws  = impulsesx(7,2)(1)
set py_draws(1) draws draws = impulsesx(7,1)(1) + p_draws(1){0}
do kkstep = 2,nstep
  set p_draws(kkstep)  draws draws = impulsesx(7,2)(kkstep) + p_draws(kkstep-1){0}
  set py_draws(kkstep) draws draws = (p_draws(kkstep){0}) + (impulsesx(7,1)(kkstep))
end do kkstep


END DO DRAWS


/*
order the impies to get percentile bands
*/
do kkvar=1,nvar_graf
do kkstep=1,nstep

order asymerr(var_index(kkvar),kkstep) 1 ndraws
stat(noprint,fractiles) asymerr(var_index(kkvar),kkstep) 1 ndraws
set stdlist(kkvar) kkstep kkstep = sqrt(%variance)

end do kkstep
end do kkvarv

do kkstep=1,nstep

order p_draws(kkstep) 1 ndraws
stat(noprint,fractiles) p_draws(kkstep) 1 ndraws
set p_std kkstep kkstep = sqrt(%variance)

order py_draws(kkstep) 1 ndraws
stat(noprint,fractiles) py_draws(kkstep) 1 ndraws
set py_std kkstep kkstep = sqrt(%variance)

end do kkstep



/*
disp 'write vvv'
write vvv
*/

/* 
this doesn't work if kkvar<4!
print(nodates) 1 ndraws+20 asymerr(var_index(4),1) asymerr(var_index(4),12) 
*/

*  5.  after do loop, compute std errors of impies.  plot the point
*      estimate plus 90% symmetric confidence intervals.


do jjshok=1,%rows(shok_index)
do kkvar=1,nvar_graf

do kkstep=1,nstep
statistics(fractiles,nomoments,noprint)  asymerr(var_index(kkvar),kkstep) 1 ndraws 
compute lo05 = .05*%nobs+.5
compute up95 = .95*%nobs+.5
set lower kkstep kkstep =  asymerr(var_index(kkvar),kkstep)(fix(lo05))
set upper kkstep kkstep =  asymerr(var_index(kkvar),kkstep)(fix(up95))
end do kkstep

set implist(kkvar) 1 nstep = impulses(shok_index(jjshok),var_index(kkvar))
set pluslist(kkvar) 1 nstep = upper
set minlist(kkvar) 1 nstep = lower


clear upper lower
end do kkvar
end do jjshok

set p_hi 1 ndraws = p_est{0} + 2*p_std{0}
set p_lo 1 ndraws = p_est{0} - 2*p_std{0}
set py_hi 1 ndraws = py_est{0} + 2*py_std{0}
set py_lo 1 ndraws = py_est{0} - 2*py_std{0}


*print(nodates) 1 nstep y_est y_std pi_est pi_std

do jj = 1,nvar_graf
set pluslist(jj) 1 nstep = implist(jj){0}+2*stdlist(jj){0}
set minlist(jj)  1 nstep = implist(jj){0}-2*stdlist(jj){0}
end do jj

dofor jj = $
 y_est pi_est inv_est rff_est dm_est w_est $
 y_hi pi_hi inv_hi rff_hi dm_hi w_hi $
 y_lo pi_lo inv_lo rff_lo dm_lo w_lo $
 cons_est cons_hi cons_lo $
 prod_est prod_hi prod_lo prof_est prof_hi prof_lo $
 p_est p_hi p_lo py_est py_hi py_lo
set jj 1 nstep = -jj{0}
end do jj


open plot CEEFigure1.rgf
spgraph(vfields=5,hfield=2)
graph(samesize,nodates,header='FF --> Y') 3
# y_est 1 nstep 1
# y_hi 1 nstep 2
# y_lo 1 nstep 2
graph(samesize,nodates,header='FF --> Cons') 3
# cons_est 1 nstep 1
# cons_hi 1 nstep 2
# cons_lo 1 nstep 2
graph(samesize,nodates,header='FF --> Invest') 3
# inv_est 1 nstep 1
# inv_hi 1 nstep 2
# inv_lo 1 nstep 2
graph(samesize,nodates,header='FF --> PI') 3
# pi_est 1 nstep 1
# pi_hi 1 nstep 2
# pi_lo 1 nstep 2
graph(samesize,nodates,header='FF --> FF') 3
# rff_est 1 nstep 1
# rff_hi 1 nstep 2
# rff_lo 1 nstep 2
graph(samesize,nodates,header='FF --> wage') 3
# w_est 1 nstep 1
# w_hi 1 nstep 2
# w_lo 1 nstep 2
graph(samesize,nodates,header='FF --> productivity') 3
# prod_est 1 nstep 1
# prod_hi 1 nstep 2
# prod_lo 1 nstep 2
graph(samesize,nodates,header='FF --> Real Profits') 3
# prof_est 1 nstep 1
# prof_hi 1 nstep 2
# prof_lo 1 nstep 2
graph(samesize,nodates,header='FF --> dM2') 3
# dm_est 1 nstep 1
# dm_hi 1 nstep 2
# dm_lo 1 nstep 2
graph(samesize,nodates,header='FF --> PY') 3
# py_est 1 nstep 1
# py_hi 1 nstep 2
# py_lo 1 nstep 2
spgraph(done)
close plot

end
